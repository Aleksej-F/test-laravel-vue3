<?php

namespace App\Telegram;

use DefStudio\Telegraph\Facades\Telegraph;
use DefStudio\Telegraph\Handlers\WebhookHandler;
use DefStudio\Telegraph\Keyboard\Button;
use DefStudio\Telegraph\Keyboard\Keyboard;
use DefStudio\Telegraph\Keyboard\ReplyKeyboard;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Stringable;
use DefStudio\Telegraph\Models\TelegraphChat;
use App\Models\Task;
use App\Models\TaskList;
use Illuminate\Support\Facades\Auth;
use App\Models\User;
class Handler extends WebhookHandler
{
    public function hello(string $name): void
    {
        $this->reply("–ü—Ä–∏–≤–µ—Ç, $name!");
    }

    public function help(): void
    { 
        // $messsss = $this->message->toArray();
        // $chat_test = $messsss['chat']['id'];
        // $chat = $this->chat;
        // if (($chat_test == 1201041131) or ($chat_test == -1002363116448)){

       
            // $this->reply(json_encode($this->message->toArray(), flags: JSON_UNESCAPED_UNICODE));
            // $this->reply(json_encode($messsss['chat']['id'], flags: JSON_UNESCAPED_UNICODE));
            // $chat = TelegraphChat::where('chat_id', intval($messsss['chat']['id']));
            // $chat = TelegraphChat::find(2);
            // $chat = $messsss['chat'];
            
            // $this->reply(json_encode( $chat->memberCount(), flags: JSON_UNESCAPED_UNICODE));
            // $chat = new TelegraphChat($messsss['chat']['id']);
            // $chat = TelegraphChat::find(13);
            // $chat->withData('caption', 'test')->message('hello')->send();
            // $chat->info();
            // $chat->html('<b>–û–π, –Ø —Ç–æ–ª—å–∫–æ —É—á—É—Å—å...</b>')->send();
            // $this->reply(json_encode( $chat->memberInfo(), flags: JSON_UNESCAPED_UNICODE));
        // };
        
        // $response = $chat->message('–û–π, –Ø —Ç–æ–ª—å–∫–æ —É—á—É—Å—å...')->send();
       
        // $this->reply(json_encode($response, flags: JSON_UNESCAPED_UNICODE));
        

         // ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã Telegram
        //  $groupId = $messsss['chat']['id']; // –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
        //  $groupId = Telegraph::chatInfo();
        //  $this->reply(json_encode( Telegraph::chatInfo()->send(), flags: JSON_UNESCAPED_UNICODE));
        //  Telegraph::chatInfo()->send();
         //  try {
        //      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
        //      $response = Telegraph::getChatMemberCount($groupId);
        //      $this->reply(json_encode($response, flags: JSON_UNESCAPED_UNICODE));
        //      if ($response->telegraphOk()) {
        //          $membersCount = $response->getResult(); @Why_buy_lists_bot
                 
        //          // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±–æ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
        //          $responseAllMembers = Telegraph::getChatMembers($groupId);
 
        //          if ($responseAllMembers->telegraphOk()) {
        //              $allMembers = $responseAllMembers->getResult();
                     
        //              $this->reply(json_encode([
        //                  'total_members_count' => $membersCount,
        //                  'members_list' => $allMembers
        //              ], flags: JSON_UNESCAPED_UNICODE));
        //          }
        //      }
        //  } catch (\Exception $e) {
        //     $this->reply(json_encode(['error' => $e->getMessage()], flags: JSON_UNESCAPED_UNICODE));
        //  }
         
        //  $this->reply('Failed to fetch group members');
         
    }
    public function open_lists(): void
    {
    //    $this->reply(json_encode($this->message->toArray(), flags: JSON_UNESCAPED_UNICODE));
    //    $chat = TelegraphChat::find(44);
    //    $chatSet =  new TelegraphChat($this->message->chat);
     $this->reply('–Ø —ç—Ç–æ–º—É –µ—â–µ —É—á—É—Å—å');
    //    Telegraph::message('–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ')
    //     ->keyboard(
    //         Keyboard::make()->buttons([
    //             Button::make('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')->loginUrl('https://tasklist.ecostroi-spb.ru')
    //         ])
    //     )->send();
        
      
        // $this->url('https://tasklist.ecostroi-spb.ru');
        //Button::make('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')->loginUrl('https://login.url.dev');
       

    }
    public function actions(): void
    {
        $messsss = $this->message->toArray();
        $chat_test = $messsss['chat']['id'];
        $this->reply(json_encode( $chat_test>0, flags: JSON_UNESCAPED_UNICODE));
        $this->chat->message('–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ')
        ->keyboard(
            Keyboard::make()->buttons([
                Button::make('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')->url('https://tasklist.ecostroi-spb.ru'),
                Button::make('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ')->loginUrl('https://tasklist.ecostroi-spb.ru/loginbottg'),
                $chat_test > 0 ? Button::make('Open mini App')->webApp('https://tasklist.ecostroi-spb.ru/miniappautch'): Button::make('')->action(''),
            ])
        )->send();
        // Telegraph::message('–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ')
        //     ->keyboard(
        //         Keyboard::make()->buttons([
        //             // Button::make('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')->loginUrl('https://tasklist.ecostroi-spb.ru'),
        //             Button::make('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')->url('https://tasklist.ecostroi-spb.ru'),
        //             Button::make('–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫')->action('like'),
        //             Button::make('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')
        //                 ->action('subscribe')
        //                 ->param('channel_name', '@areaweb'),
        //         ])
        //     )->send();
    }
    public function shopping_list(): void
    {

        // $keyboard = ReplyKeyboard::make()
        //     ->button('Send Contact')->requestContact()
        //     ->button('Send Location')->requestLocation()
        //     ->inputPlaceholder("Waiting for input...");

        // $this->chat->message('–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ')
        // ->replyKeyboard($keyboard
            
        // )->send();
    }
    //—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    public function create_shopping_list(): void
    {
        $messsss = $this->message->toArray();
        $chatId = $messsss['chat']['id'];
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        $text = $messsss['text'] ?? null;
        
        if ($text) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.

            // –ü—Ä–∏–º–µ—Ä: –û—Ç–≤–µ—á–∞–µ–º —ç—Ö–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
            $response = "–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: " . $text;

            Telegraph::chat($chatId)
                ->message($response)
                ->send();

        }

        // $keyboard = ReplyKeyboard::make()
        //     ->button('Send Contact')->requestContact()
        //     ->button('Send Location')->requestLocation()
        //     ->inputPlaceholder("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞...");

        // $this->chat->message('–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ')
        // ->replyKeyboard($keyboard
            
        // )->send();
    }
    public function like(): void
    {
        Telegraph::message('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –∫—Ä—É—Ç–æ–π –ª–∞–π–∫!')->send();
    }

    public function subscribe(): void
    {
        $this->reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {$this->data->get('channel_name')}");
    }

    public function start(): void
    {
        $messsss = $this->message->toArray();
        $chat_test = $messsss['chat']['id'];
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        $textMes = $messsss['text'] ?? null;
        
        if (strpos($textMes, '/start') === 0) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
            $parameter = trim(substr($textMes, strlen('/start')));
            // $this->reply($textMes.' - '. $parameter);

            if (empty($parameter)) {
                $this->reply('–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π :-)');
                return;
            }
           // –†–∞–∑–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "share_CONTENT_ID")
            $parts = explode("_", $parameter);

            if (count($parts) !== 2 || $parts[0] !== "share") {
                $this->reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.");
                return;
            }
            $contentId = $parts[1];
            // $this->reply($contentId);
            $this->chat->message("–í–∞—Å –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫. " .
            "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. üòä")
            ->keyboard(
                Keyboard::make()->buttons([
                    Button::make('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç')->url('https://tasklist.ecostroi-spb.ru/tasklist/share/'.$contentId),
                    Button::make('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ')->loginUrl('https://tasklist.ecostroi-spb.ru/loginbottg/tasklist/share/'.$contentId),
                    $chat_test > 0 ? Button::make('Open mini App')->webApp('https://tasklist.ecostroi-spb.ru/tasklist/share/'.$contentId): Button::make('')->action(''),
                ])
            )->send();
        }

    }

    

    protected function handleUnknownCommand(Stringable $text): void
    {
       
           
        $this->reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
          
       
    }

    protected function handleChatMessage(Stringable $text): void
    {
        Log::info(json_encode($this->message->toArray(), flags: JSON_UNESCAPED_UNICODE));
        // $this->reply(json_encode($this->message->toArray(), flags: JSON_UNESCAPED_UNICODE));
        $messsss = $this->message->toArray();
        $chat_test = $messsss['chat']['id'];
        // $this->reply($text);
       
    }
}